AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Description: 'Blobstore stack, create a dynamodb instance, and the lambda backed API gateway'

Parameters:
  Stage:
    Type: String
    Default: 'v1'
    Description: deployment stage

  Domain:
    Type: String
    Description: 'base domain'
    AllowedPattern: (?!-)[a-zA-Z0-9-.]{1,63}(?<!-)

  Sha:
    Type: String
    Description: 'unique build identifier'

  BranchSlug:
    Type: String
    Description: 'url safe branch name'

  CertificateArn:
    Type: String
    Description: 'ARN for certificate'

Globals:
  Function:
    Handler: index.handler
    Runtime: nodejs8.10
    Timeout: 3
    MemorySize: 128

Resources:
  apiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Ref AWS::StackName

  apiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref apiGatewayDeployment
      RestApiId: !Ref apiGateway
      StageName: !Ref Stage

  apiKey:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Enabled: true
      # StageKeys:
      #   - RestApiId: !Ref apiGateway
      #     StageName": !Ref Stage

  apiUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      ApiStages:
        - ApiId: !Ref apiGateway
          Stage: !Ref apiStage
      Quota:
        Limit: 20000
        Period: MONTH
      Throttle:
        BurstLimit: 10
        RateLimit: 10

  apiUsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId: !Ref apiKey
      KeyType: API_KEY
      UsagePlanId: !Ref apiUsagePlan

  safeResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt apiGateway.RootResourceId
      RestApiId: !Ref apiGateway
      PathPart: 'safe'

  safeSafeIdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref safeResource
      RestApiId: !Ref apiGateway
      PathPart: '{safeId}'

  safeSafeIdTransactionResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref safeSafeIdResource
      RestApiId: !Ref apiGateway
      PathPart: 'transaction'

  safeSafeIdTransactionTransactionIdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref safeSafeIdTransactionResource
      RestApiId: !Ref apiGateway
      PathPart: '{transactionId}'

  safeSafeIdUserResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref safeSafeIdResource
      RestApiId: !Ref apiGateway
      PathPart: 'user'

  safeSafeIdUserUserIdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref safeSafeIdUserResource
      RestApiId: !Ref apiGateway
      PathPart: '{userId}'

  safeSafeIdMethodGet:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations'
          - lambdaArn: !GetAtt storeLambda.Arn
      ResourceId: !Ref safeSafeIdResource
      RestApiId: !Ref apiGateway

  safeSafeIdMethodPut:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: PUT
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations'
          - lambdaArn: !GetAtt storeLambda.Arn
      ResourceId: !Ref safeSafeIdResource
      RestApiId: !Ref apiGateway

  safeSafeIdTransactionMethodPut:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: PUT
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations'
          - lambdaArn: !GetAtt storeLambda.Arn
      ResourceId: !Ref safeSafeIdTransactionResource
      RestApiId: !Ref apiGateway

  safeSafeIdUserMethodPut:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: PUT
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations'
          - lambdaArn: !GetAtt storeLambda.Arn
      ResourceId: !Ref safeSafeIdUserResource
      RestApiId: !Ref apiGateway

  safeSafeIdMethodOption:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      ResourceId: !Ref safeSafeIdResource
      RestApiId: !Ref apiGateway
      Integration:
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS,PUT'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false

  safeSafeIdUserMethodOption:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      ResourceId: !Ref safeSafeIdUserResource
      RestApiId: !Ref apiGateway
      Integration:
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS,PUT'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false

  safeSafeIdTransactionMethodOption:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      ResourceId: !Ref safeSafeIdTransactionResource
      RestApiId: !Ref apiGateway
      Integration:
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS,PUT'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false

  apiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - safeSafeIdMethodGet
      - safeSafeIdMethodPut
      - safeSafeIdUserMethodPut
      - safeSafeIdTransactionMethodPut
      - safeSafeIdMethodOption
      - safeSafeIdUserMethodOption
      - safeSafeIdTransactionMethodOption
    Properties:
      RestApiId: !Ref apiGateway

  storeLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: '../packages/blobstore-aws-dynamodb/.build/bundle.zip'
      Role: !GetAtt storeLambdaExecutionRole.Arn
      Environment:
        Variables:
          SAFE_TABLE: !Ref safeTable
          DEBUG: 'routing'

  storeLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: allow-access-to-lambda-from-appsync
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGrou
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:DeleteItem
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:UpdateItem
                Resource: '*'

                # - !Sub 'arn:aws:dynamodb:${AWS::Region}:{AWS::AccountId}:table/{safeTable}'
                #
  storeLambdaApiGatewayInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt storeLambda.Arn
      Principal: 'apigateway.amazonaws.com'
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/*/*/*'

  safeTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: 'id'
          AttributeType: 'S'

      KeySchema:
        - AttributeName: 'id'
          KeyType: 'HASH'

      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  staticAssetBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead
      CorsConfiguration:
        CorsRules:
          - AllowedMethods:
              - GET
            AllowedOrigins:
              - '*'
      WebsiteConfiguration:
        ErrorDocument: index.html
        IndexDocument: index.html
        # RoutingRules:
        #   - RedirectRule:
        #       HttpRedirectCode: '301'
        #       Protocol: http
        #       ReplaceKeyWith: index.html
        #     RoutingRuleCondition:
        #       HttpErrorCodeReturnedEquals: '403'
        #   - RedirectRule:
        #       HttpRedirectCode: '301'
        #       Protocol: http
        #       ReplaceKeyWith: index.html
        #     RoutingRuleCondition:
        #       HttpErrorCodeReturnedEquals: '404'

  # CustomDomainCertificate:
  #   Type: 'AWS::CertificateManager::Certificate'
  #   Properties:
  #     DomainName: !Ref Domain

  BranchDomain:
    Type: AWS::ApiGateway::DomainName
    Properties:
      DomainName: !Sub '${BranchSlug}.${Domain}'
      RegionalCertificateArn: !Ref CertificateArn
      EndpointConfiguration:
        Types:
          - 'REGIONAL'

  BranchDomainBasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      BasePath: ''
      DomainName: !Ref BranchDomain
      RestApiId: !Ref apiGateway
      Stage: !Ref apiStage

  UniqueDomain:
    Type: AWS::ApiGateway::DomainName
    Properties:
      DomainName: !Sub '${Sha}.${Domain}'
      RegionalCertificateArn: !Ref CertificateArn
      EndpointConfiguration:
        Types:
          - 'REGIONAL'

  UniqueDomainBasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      BasePath: ''
      DomainName: !Ref UniqueDomain
      RestApiId: !Ref apiGateway
      Stage: !Ref apiStage

Outputs:
  appUrl2:
    Description: 'app endpoint URL'
    Value: !Sub 'https://${apiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Stage}'
  appUrl:
    Description: 'app endpoint URL'
    Value: !Sub 'https://${Sha}.${Domain}'
  s3Url:
    Description: 'bucket public access url'
    Value: !Sub 'https://${staticAssetBucket}.s3-website-${AWS::Region}.amazonaws.com'
  bucketName:
    Description: 'static asset bucket name'
    Value: !Ref staticAssetBucket
